using System;
using System.IO;
using System.Reflection;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Veritrade2017.Helpers;

namespace VeritradeTests
{
    [TestClass]
    public class VulnerabilityTest
    {
        [TestMethod]
        //Debe crear un archivo de logs al momento de atrapar una excepción
        public void CheckingFileLogException()
        {
            string logFile = "App_Data/ErrorLog-" + DateTime.Now.ToString("yyyyMMdd") + ".txt";
            File.Delete(logFile);
            try
            {
                throw new System.DivideByZeroException();
            }
            catch (Exception exc)
            {
                string source = MethodBase.GetCurrentMethod().DeclaringType.FullName;
                int index = source.IndexOf(">");
                if (index > 0)
                {
                    source = source.Replace("+<", ".");
                    source = source.Substring(0, source.IndexOf(">"));
                }

                if (logFile != null)
                {
                    // Open the log file for append and write the log
                    StreamWriter sw = new StreamWriter(logFile, true);
                    sw.WriteLine("********** {0} **********", DateTime.Now);
                    if (exc.InnerException != null)
                    {
                        sw.Write("Inner Exception Type: ");
                        sw.WriteLine(exc.InnerException.GetType().ToString());
                        sw.Write("Inner Exception: ");
                        sw.WriteLine(exc.InnerException.Message);
                        sw.Write("Inner Source: ");
                        sw.WriteLine(exc.InnerException.Source);
                        if (exc.InnerException.StackTrace != null)
                        {
                            sw.WriteLine("Inner Stack Trace: ");
                            sw.WriteLine(exc.InnerException.StackTrace);
                        }
                    }
                    sw.Write("Exception Type: ");
                    sw.WriteLine(exc.GetType().ToString());
                    sw.WriteLine("Exception: " + exc.Message);
                    sw.WriteLine("Source: " + source);
                    sw.WriteLine("Stack Trace: ");
                    if (exc.StackTrace != null)
                    {
                        sw.WriteLine(exc.StackTrace);
                        sw.WriteLine();
                    }
                    sw.WriteLine("********** Datos del Cliente **********");
                    sw.WriteLine();
                    sw.Close();
                }
            }
            bool fileLogExists = File.Exists("App_Data/ErrorLog-" + DateTime.Now.ToString("yyyyMMdd") + ".txt");
            Assert.AreEqual(true, fileLogExists);
        }

        [TestMethod]
        public void CheckingEmailPassword()
        {
            string password = Resources.Resources.EmailEnvioPassword;
            Assert.IsTrue(password.Length > 0);
        }
    }
}
